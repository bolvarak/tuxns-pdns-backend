///////////////////////////////////////////////////////////////////////////////
/// Headers //////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////

#include "Listener.hpp"

///////////////////////////////////////////////////////////////////////////////
/// TuxNS Namespace //////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////

namespace TuxNS
{
	///////////////////////////////////////////////////////////////////////////
	/// Constructor //////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////

	Listener::Listener(QObject* objParent) : QLocalServer(objParent)
	{
		// Connect our slots
		this->connect(this, SIGNAL(newConnection()), this, SLOT(client()));
	}

	///////////////////////////////////////////////////////////////////////////
	/// Public Methods ///////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////

	void Listener::await()
	{
		// Setup the permissions
		this->setSocketOptions(QLocalServer::WorldAccessOption);
		// Send the log message
		Log::notice("Listener is Firing Up!");
		// Try to start the server
		if (this->listen("/home/tbrown/tuxns-pdns.sock")) {
			// Send the log message
			Log::notice("Server is now Listening!");
		} else {
			// Send the log message
			Log::fail(QString("Server Terminated!  (%1)").arg(this->errorString()));
		}
	}

	///////////////////////////////////////////////////////////////////////////
	/// Public Slots /////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////

	void TuxNS::Listener::client()
	{
		// Send the log message
		Log::notice("New Client!");
		// Create the connection
		Connection* clsConnection = new Connection(this);
		// Set the socket descriptor
		clsConnection->setSocket(this->nextPendingConnection());
	}

///////////////////////////////////////////////////////////////////////////////
} // End TuxNS Namespace /////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
